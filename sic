#!/usr/bin/env bash

sic_store=${SIC_FILE:=~/.sic}
gpg_recipient="${SIC_KEYID:=}"
gpg_command=${SIC_GPG:="$(command -v gpg2 || command -v gpg)"}
copy_command=${SIC_COPY:=xclip -sel clip}

_list () {
  read_password_entries

  printf "%-50s\t%-50s\n" 'KEY' 'VALUE'
  while read -r line; do
    [ -z "$line" ] && continue
    local key_val=(${line//:[[:space:]]/ })
    printf "%-50s\t%-50s\n" ${key_val[0]} ${key_val[1]}
  done <<< "$password_entries"
}

_get () {
  read_password_entries

  local key="${1}"
  local entry=$(grep "$key:[[:space:]]" <(echo "$password_entries"))

  if ! [[ $entry ]]; then
    fail "Key does not exist"
  fi

  local key_val=(${entry//:[[:space:]]/ })

  if [ -z "$2" ]; then
    echo ${key_val[1]}
  else
    echo ${key_val[1]} | $copy_command
  fi
}

_add () {
  read_password_entries

  local key="${1}"
  local value="${2}"

  if grep -q "$key:[[:space:]]" <(echo $password_entries); then
    fail "Key already exists"
  fi

  local NEWLINE=$'\n'
  local password_entries="${password_entries}${NEWLINE}${key}: ${value}"

  write_password_entries "$password_entries"
}

_edit () {
  read_password_entries

  local key="${1}"
  local value="${2}"
  local key_val="$key: $value"

  if ! grep -q "$key:[[:space:]]" <(echo $password_entries); then
    fail "Key does not exist"
  fi

  local password_entries=$(echo "$password_entries" | sed -e "s/$key: \S*/$key_val/")

  write_password_entries "$password_entries"
}

_remove () {
  read_password_entries

  local key="${1}"

  if ! grep -q "$key:[[:space:]]" <(echo $password_entries); then
    fail "Key does not exist"
  fi

  local password_entries=$(echo "$password_entries" | grep -v "$key:[[:space:]]")

  write_password_entries "$password_entries"
}

_help () {
cat << EOF
NAME:
  sic - A Command Line Password Manager Backed By GPG's Asymmetric Encryption

USAGE:
  $(basename "$0") [options...] command [arguments...] [command options]

COMMANDS
  list, ls                           List all entries in the password store
  get, g          <key>              Get the value of a password entry. Pass the optional "-c" argument to copy the password to the clipboard
  add, a          <key> <value>      Add a password entry to the password store
  edit, e         <key> <value>      Edit an existing entry
  remove, rm      <key>              Remove an existing entry
  help, h                            Show this message

OPTIONS
  -f      File to store passwords or set \$SIC_FILE. Defaults to "~/.sic"
  -k      GPG keyid used for encryption & decryption or set \$SIC_KEYID. Defaults to GPG's option "--default-recipient-self"
  -e      GPG used command or set \$SIC_GPG. Defaults to "gpg2" then "gpg" if it was not found
  -y      Copying/yanking command or set \$SIC_COPY. Defaults to "xclip -sel clip"
EOF

  exit 1
}

read_password_entries () {
  prompt_for_passphrase
  [[ -s $sic_store ]] && check_passphrase

  password_entries=$(decrypt "${passphrase}" | sort)
}

write_password_entries () {
  echo "$password_entries" | encrypt $passphrase -
}

prompt_for_passphrase () {
  passphrase_for=${gpg_recipient:-"default key"}
  read -p "Enter GPG Passphrase for ($passphrase_for): " -s passphrase; echo -e '\n'
}

check_passphrase () {
  decrypt "${passphrase}" >/dev/null || fail "Incorrect Passphrase"
}

decrypt () {
  echo "${1}" | ${gpg_command} \
    --decrypt \
    --armor --batch --no-tty --quiet \
    --passphrase-fd 0 \
    "${sic_store}" 2>/dev/null
}

encrypt () {
  recipient_option="--recipient=$gpg_recipient"
  local_user_option="--local-user=$gpg_recipient"

  if [[ "$gpg_recipient" == "" ]]; then
    recipient_option="--default-recipient-self"
    local_user_option=""
  fi

  ${gpg_command} \
    --encrypt \
    $recipient_option \
    $local_user_option \
    --sign \
    --armor --batch --no-tty --yes \
    --passphrase-fd 3 \
    --output "$sic_store" "${2}" 3< <(echo "${1}") 2>/dev/null
}

fail () {
  echo "Error: ${1}";
  exit 1
}

while getopts ':f:k:e:y:' opt; do
  case $opt in
    f) sic_store="$OPTARG"     ;;
    k) gpg_recipient="$OPTARG" ;;
    e) gpg_command="$OPTARG"   ;;
    y) copy_command="$OPTARG"  ;;
  esac
done
shift "$((OPTIND-1))"

if [[ $# == 0 ]]; then
  _help
else
  case "$1" in
    list|ls)
      if [[ "$#" -ne 1 ]]; then
        _help
      fi
      _list
      ;;
    get|g)
      if [ \( "$#" -eq 3 -a "$3" == '-c' \) -o "$#" -eq 2 ]; then
        _get "$2" "$3"
      else
        _help
      fi
      ;;
    add|a)
      if [[ "$#" -ne 3 ]]; then
        _help
      fi
      _add "$2" "$3"
      ;;
    edit|e)
      if [[ "$#" -ne 3 ]]; then
        _help
      fi
      _edit "$2" "$3"
      ;;
    remove|rm)
      if [[ "$#" -ne 2 ]]; then
        _help
      fi
      _remove "$2"
      ;;
    help|h)
      _help
      ;;
    *)
      _help
  esac
fi
