#!/usr/bin/env bash

SIC_STORE=${SIC_FILE:=~/.sic}
GPG_RECIPIENT="${SIC_KEYID:=}"
GPG="$(command -v gpg2 || command -v gpg)"

fail () {
  echo "Error: ${1}";
  exit 1
}

get_passphrase () {
  read -p "Enter GPG Passphrase: " -s passphrase; echo -e '\n'
}

decrypt () {
  echo "${1}" | ${GPG} \
    --decrypt \
    --armor --batch --no-tty --quiet \
    --passphrase-fd 0 \
    "${SIC_STORE}" 2>/dev/null
}

encrypt () {
  ${GPG} \
    --encrypt \
    --recipient="$GPG_RECIPIENT" \
    --local-user="$GPG_RECIPIENT" \
    --armor --batch --no-tty --yes \
    --passphrase-fd 3 \
    --output "$SIC_STORE" "${2}" 3< <(echo "${1}")
}

read_password_entries () {
  get_passphrase
  password_entries=$(decrypt "${passphrase}")
}

write_password_entries () {
  echo "$password_entries" | encrypt $passphrase -
}

list () {
  read_password_entries

  printf "%-50s\t%-50s\n" 'KEY' 'VALUE'
  while read -r line; do
    [ -z "$line" ] && continue
    local key_val=(${line//:[[:space:]]/ })
    printf "%-50s\t%-50s\n" ${key_val[0]} ${key_val[1]}
  done <<< "$password_entries"
}

get () {
  read_password_entries

  local key="${1}"
  local entry=$(grep "$key:[[:space:]]" <(echo "$password_entries"))
  if ! [[ $entry ]]; then
    fail "Key does not exist"
  fi

  local key_val=(${entry//:[[:space:]]/ })
  echo ${key_val[1]}
}

add () {
  read_password_entries

  local key="${1}"
  local value="${2}"

  if grep -q "$key:[[:space:]]" <(echo $password_entries); then
    fail "Key already exists"
  fi
  NEWLINE=$'\n'
  password_entries="${password_entries}${NEWLINE}${key}: ${value}"

  write_password_entries
}

edit () {
  read_password_entries

  local key="${1}"
  local value="${2}"
  local key_val="$key: $value"

  if ! grep -q "$key:[[:space:]]" <(echo $password_entries); then
    fail "Key does not exist"
  fi
  password_entries=$(echo "$password_entries" | sed -e "s/$key: \S*/$key_val/")

  write_password_entries
}

remove () {
  read_password_entries

  local key="${1}"

  if ! grep -q "$key:[[:space:]]" <(echo $password_entries); then
    fail "Key does not exist"
  fi
  password_entries=$(echo "$password_entries" | grep -v "$key:[[:space:]]")

  write_password_entries
}

_help () {
cat << EOF
NAME:
  sic - GPG Based Password Manager

USAGE:
  $(basename "$0") command [arguments...]

COMMANDS
   list, ls                                 List all entries in the password store
   get, g        <key>                      Get the value of a password entry
   add, a        <key> <value>              Add a password entry to the password store
   edit, e       <key> <value>              Edit an existing entry
   remove, rm    <key>                      Remove an existing entry
   help, h                                  Show this message
EOF
}

if [[ $# == 0 ]]; then
    _help
else
  case "$1" in
    list|ls)
      # list command
      list
      ;;
    get|g)
      # get command
      get "$2"
      ;;
    add|a)
      # add command
      add "$2" "$3"
      ;;
    edit|e)
      # update command
      edit "$2" "$3"
      ;;
    remove|rm)
      # remove command
      remove "$2"
      ;;
    help|h)
      _help
      ;;
    *)
      _help
  esac
fi
